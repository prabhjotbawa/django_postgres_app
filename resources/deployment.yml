---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: http-01-production
spec:
  acme:
    email: your-email@devopsbyexample.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: http-01-production-cluster-issuer # secrets get created in cert-manager-namespace
    solvers:
      - http01: # two types of challenges, http-01 and dns-01. dns-01 needs a dns record to be created
          ingress:
            ingressClassName: external-nginx
---
apiVersion: v1
kind: Namespace
metadata:
  name: webapp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-app
  namespace: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django-app
  template:
    metadata:
      labels:
        app: django-app
    spec:
      containers:
      - name: django-app
        image: prabhjotbawa/mywebapp:latest
        ports:
        - containerPort: 5001
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DJANGO_DISABLE_MIGRATIONS
          value: 'false' # Run migration
        - name: DB_NAME
          value: mydatabase
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-password
        - name: DB_HOST
          value: postgres-service
        - name: DB_PORT
          value: "5432"
        - name: ALLOWED_HOSTS
          value: testapp.prabhjotbawa.com
        - name: CSRF_TRUSTED_ORIGINS
          value: https://testapp.prabhjotbawa.com
---
apiVersion: v1
kind: Service
metadata:
  name: django-app-service
  namespace: webapp
spec:
  selector:
    app: django-app
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001
  type: ClusterIP  # Changed from LoadBalancer to ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: django-app-ingress
  namespace: webapp
  annotations:
    cert-manager.io/cluster-issuer: http-01-production # points to the cluster issuer
spec:
  ingressClassName: external-nginx
  rules:
    - host: testapp.prabhjotbawa.com # Create a CNAME DNS record in Route 53 to point to the LB
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: django-app-service
                port:
                  number: 5001
  tls:
    - hosts:
        - testapp.prabhjotbawa.com
      secretName: testapp-prabhjotbawa-com
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: mydatabase
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: webapp
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: webapp
type: Opaque
data:
  postgres-user: bXl1c2Vy  # base64 encoded "myuser"
  postgres-password: bXlwYXNzd29yZA==  # base64 encoded "mypassword"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: webapp
data:
  init.sh: |
    #!/bin/bash
    set -e

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
      CREATE TABLE IF NOT EXISTS myapp_mymodel (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          description TEXT
      );
    EOSQL